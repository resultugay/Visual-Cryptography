/*
 --------------------
 /@author resultugay/
 --------------------

                      --------------Visual Criptography--------------

    Take two pictures and merge them into one.
    Algorithm behind this program is very simple.Assume that every pixel consists of
    three component as Red,Green,Blue(except alpha).And each component which is color
    object is represented 8 bit.By mean that you can define 255 different value.So every
    pixel can be defined 24-bit for three RGB color.That means 2^24(16 million) different color.
    Without talking so much about theory, Algorithm is based on these bits.The program takes 
    pixels' RGB value from one image and divide every pixel into four part.And distrubute these
    pixels to the another picture's pixels which will encript.Encripted image does not deform.Because
    every 2 bits  ar just replaced with last 2 bits in encripted image.Lets give an example.
    
    Think about we have a RGB value which is RGB(255,255,255).
    White
    RGB (FFFFFF) = RGB(255,255,255) = RGB(11111111,11111111,11111111)
    
    Another four pixels from second(encripted) image is 
    1. Pixel  = RGB(10111011,10101110,10101110)
    2. Pixel  = RGB(10101110,10100010,11011000)
    3. Pixel  = RGB(11001110,10101110,10101110)
    4. Pixel  = RGB(01011110,10101000,11100101)

    now divide first pixel(for each color value) into four part.
        Red             Green          Blue
    11  11  11  11   11 11 11 11    11 11 11 11 

    distrube these values to LSB to every pixel.

    1. Pixel = RGB(101110 11,101011 11,101011 11)
    2. Pixel = RGB(101011 11,101000 11,110110 11)
    3. Pixel = RGB(110011 11,101011 11,101011 11)
    4. Pixel = RGB(010111 11,101010 11,111001 11)

   With this operation, deformation will be minimum level.Because difference
   between  11111111 and 11111100 color value is almost nothing and when you
   think this effect about all picture you can not distinguish that deformation.    

*/
package cryptography;

import javax.swing.JOptionPane;


public class VisualCriptography extends javax.swing.JFrame {

    /**
     * Creates new form VisualCriptography
     */
    public VisualCriptography() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        encrypto = new javax.swing.JButton();
        crypto = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Visual Cryptography");
        setBounds(new java.awt.Rectangle(375, 100, 300, 300));
        setName("Image Criptography"); // NOI18N

        encrypto.setBackground(new java.awt.Color(204, 204, 204));
        encrypto.setText("Encrypt");
        encrypto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptoActionPerformed(evt);
            }
        });

        crypto.setBackground(new java.awt.Color(204, 204, 204));
        crypto.setText("Crypt");
        crypto.setName(""); // NOI18N
        crypto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cryptoActionPerformed(evt);
            }
        });

        jLabel1.setText("Which Operation would you like to do ?");

        jLabel2.setText("Take two pictures and merge them into one!");

        jLabel3.setText("Encrypt your crypted image !");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(55, 55, 55)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(crypto, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(64, 64, 64)
                        .addComponent(encrypto, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(encrypto, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(crypto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(120, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cryptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cryptoActionPerformed
        Crypto object = new Crypto();  
        this.setVisible(false);
        object.setVisible(true);
    }//GEN-LAST:event_cryptoActionPerformed

    private void encryptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptoActionPerformed
      Encrypto object1 = new Encrypto();
      this.setVisible(false);
      object1.setVisible(true);
        
    }//GEN-LAST:event_encryptoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look acrypto       //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualCriptography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualCriptography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualCriptography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualCriptography.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VisualCriptography().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton crypto;
    private javax.swing.JButton encrypto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
